{"version":3,"file":"ExpoMapEvents.js","sourceRoot":"","sources":["../src/ExpoMapEvents.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EACL,YAAY,GAGb,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EACL,yBAAyB,EACzB,0BAA0B,GAC3B,MAAM,YAAY,CAAC;AAEpB,IAAI,MAAyB,CAAC;AAC9B,IAAI,QAAQ,CAAC,EAAE,IAAI,KAAK,EAAE;IACxB,MAAM,GAAG,yBAAyB,CAAC;CACpC;KAAM;IACL,MAAM,GAAG,0BAA0B,CAAC;CACrC;AAED,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;AAEzC,MAAM,eAAe,GAAG;IACtB,4BAA4B,EAAE,qBAAqB;IACnD,0BAA0B,EAAE,mBAAmB;IAC/C,qBAAqB,EAAE,eAAe;IACtC,4BAA4B,EAAE,qBAAqB;IACnD,0BAA0B,EAAE,mBAAmB;CAChD,CAAC;AAqBF,MAAM,UAAU,8BAA8B,CAC5C,QAAsC;IAEtC,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,4BAA4B,EAC5C,QAAQ,CACT,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,qCAAqC;IACnD,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,4BAA4B,CAAC,CAAC;AAC3E,CAAC;AAED,MAAM,UAAU,4BAA4B,CAC1C,QAAsC;IAEtC,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,0BAA0B,EAC1C,QAAQ,CACT,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mCAAmC;IACjD,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,0BAA0B,CAAC,CAAC;AACzE,CAAC;AAED,MAAM,UAAU,wBAAwB,CACtC,QAA2C;IAE3C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IACpC,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,qBAAqB,EACrC,QAAQ,CACT,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,+BAA+B;IAC7C,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;AACpE,CAAC;AAED,MAAM,UAAU,8BAA8B,CAC5C,QAAiD;IAEjD,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,4BAA4B,EAC5C,QAAQ,CACT,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,qCAAqC;IACnD,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,4BAA4B,CAAC,CAAC;AAC3E,CAAC;AAED,MAAM,UAAU,4BAA4B,CAC1C,QAA+C;IAE/C,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,0BAA0B,EAC1C,QAAQ,CACT,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mCAAmC;IACjD,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,0BAA0B,CAAC,CAAC;AACzE,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,YAA0B;IAC5D,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,UAAU,kBAAkB;IAChC,KAAK,IAAI,KAAK,IAAI,eAAe,EAAE;QACjC,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;KACpD;AACH,CAAC","sourcesContent":["import { Platform } from 'react-native';\nimport {\n  EventEmitter,\n  Subscription,\n  ProxyNativeModule,\n} from 'expo-modules-core';\nimport {\n  NativeExpoAppleMapsModule,\n  NativeExpoGoogleMapsModule,\n} from './ExpoMaps';\n\nvar module: ProxyNativeModule;\nif (Platform.OS == 'ios') {\n  module = NativeExpoAppleMapsModule;\n} else {\n  module = NativeExpoGoogleMapsModule;\n}\n\nconst emitter = new EventEmitter(module);\n\nconst MapsEventsNames = {\n  ON_CAMERA_MOVE_STARTED_EVENT: 'onCameraMoveStarted',\n  ON_CAMERA_MOVE_ENDED_EVENT: 'onCameraMoveEnded',\n  ON_MARKER_CLICK_EVENT: 'onMarkerClick',\n  ON_MARKER_DRAG_STARTED_EVENT: 'onMarkerDragStarted',\n  ON_MARKER_DRAG_ENDED_EVENT: 'onMarkerDragEnded',\n};\n\nexport type CameraEvent = {\n  latitude: number;\n  longitude: number;\n};\n\nexport type MarkerClickEvent = {\n  id: string;\n};\n\nexport type MarkerDragEndedEvent = {\n  id: string;\n  latitude: number;\n  longitude: number;\n};\n\nexport type MarkerDragStartedEvent = {\n  id: string;\n};\n\nexport function addOnCameraMoveStartedListener(\n  listener: (event: CameraEvent) => void\n): Subscription {\n  return emitter.addListener<CameraEvent>(\n    MapsEventsNames.ON_CAMERA_MOVE_STARTED_EVENT,\n    listener\n  );\n}\n\nexport function removeAllOnCameraMoveStartedListeners() {\n  emitter.removeAllListeners(MapsEventsNames.ON_CAMERA_MOVE_STARTED_EVENT);\n}\n\nexport function addOnCameraMoveEndedListener(\n  listener: (event: CameraEvent) => void\n): Subscription {\n  return emitter.addListener<CameraEvent>(\n    MapsEventsNames.ON_CAMERA_MOVE_ENDED_EVENT,\n    listener\n  );\n}\n\nexport function removeAllOnCameraMoveEndedListeners() {\n  emitter.removeAllListeners(MapsEventsNames.ON_CAMERA_MOVE_ENDED_EVENT);\n}\n\nexport function addOnMarkerClickListener(\n  listener: (event: MarkerClickEvent) => void\n): Subscription {\n  console.log(emitter._listenerCount);\n  return emitter.addListener<MarkerClickEvent>(\n    MapsEventsNames.ON_MARKER_CLICK_EVENT,\n    listener\n  );\n}\n\nexport function removeAllOnMarkerClickListeners() {\n  emitter.removeAllListeners(MapsEventsNames.ON_MARKER_CLICK_EVENT);\n}\n\nexport function addOnMarkerDragStartedListener(\n  listener: (event: MarkerDragStartedEvent) => void\n): Subscription {\n  return emitter.addListener<MarkerDragStartedEvent>(\n    MapsEventsNames.ON_MARKER_DRAG_STARTED_EVENT,\n    listener\n  );\n}\n\nexport function removeAllOnMarkerDragStartedListeners() {\n  emitter.removeAllListeners(MapsEventsNames.ON_MARKER_DRAG_STARTED_EVENT);\n}\n\nexport function addOnMarkerDragEndedListener(\n  listener: (event: MarkerDragEndedEvent) => void\n): Subscription {\n  return emitter.addListener<MarkerDragEndedEvent>(\n    MapsEventsNames.ON_MARKER_DRAG_ENDED_EVENT,\n    listener\n  );\n}\n\nexport function removeAllOnMarkerDragEndedListeners() {\n  emitter.removeAllListeners(MapsEventsNames.ON_MARKER_DRAG_ENDED_EVENT);\n}\n\nexport function removeEventListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport function removeAllListeners() {\n  for (let event in MapsEventsNames) {\n    emitter.removeAllListeners(MapsEventsNames[event]);\n  }\n}\n"]}
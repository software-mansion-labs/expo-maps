{"version":3,"file":"Maps.types.js","sourceRoot":"","sources":["../src/Maps.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ViewProps } from 'react-native';\nimport { PropsWithChildren } from 'react';\n\nexport type NativeExpoGoogleMapsViewProps = ViewProps &\n  PropsWithChildren<{\n    mapType: 'normal' | 'hybrid' | 'satellite' | 'terrain';\n    jsonStyleString: string;\n    markers: MarkerObject[];\n    enableRotateGestures: boolean;\n    enableScrollGestures: boolean;\n    enableTiltGestures: boolean;\n    enableZoomGestures: boolean;\n    polygons: PolygonObject[];\n    polylines: PolylineObject[];\n  }>;\n\nexport type NativeExpoAppleMapsViewProps = ViewProps &\n  PropsWithChildren<{\n    mapType: 'normal' | 'hybrid' | 'satellite' | 'terrain';\n    markers: MarkerObject[];\n    enableRotateGestures: boolean;\n    enableScrollGestures: boolean;\n    enableTiltGestures: boolean;\n    enableZoomGestures: boolean;\n    polygons: PolygonObject[];\n    polylines: PolylineObject[];\n  }>;\n\nexport type ExpoMapViewProps = ViewProps &\n  PropsWithChildren<{\n    provider?: 'google' | 'apple';\n    mapType?: 'normal' | 'hybrid' | 'satellite' | 'terrain';\n    googleMapsJsonStyleString?: string;\n    enableRotateGestures?: boolean;\n    enableScrollGestures?: boolean;\n    enableTiltGestures?: boolean;\n    enableZoomGestures?: boolean;\n  }>;\n\nexport type Point = {\n  latitude: number;\n  longitude: number;\n};\n\nexport type MarkerColor =\n  | 'azure'\n  | 'blue'\n  | 'cyan'\n  | 'green'\n  | 'magenta'\n  | 'orange'\n  | 'red'\n  | 'rose'\n  | 'violet'\n  | 'yellow';\n\nexport type PolygonProps = PropsWithChildren<{\n  points: Point[];\n  fillColor?: string;\n  strokeColor?: string;\n  strokeWidth?: number;\n  strokePattern?: PatternItem[];\n  jointType?: 'bevel'|'default'|'round';\n}>;\n\nexport type PolylineProps = PropsWithChildren<{\n  points: Point[];\n  color?: string;\n  width?: number;\n  pattern?: PatternItem[];\n  jointType?: 'bevel'|'default'|'round';\n  capType?: 'butt'|'round'|'square';\n}>;\n\nexport type MarkerProps = PropsWithChildren<\n  {\n    title?: string;\n    snippet?: string;\n    icon?: string;\n    defaultMarkerColor?: number | MarkerColor;\n    draggable?: boolean;\n    anchorU?: number;\n    anchorV?: number;\n    opacity?: number;\n  } & Point\n>;\n\nexport type MarkerObject = {\n  type: 'marker';\n  title?: string;\n  snippet?: string;\n  icon?: string;\n  defaultMarkerColor: number;\n  draggable: boolean;\n  anchorU?: number;\n  anchorV?: number;\n  opacity: number;\n} & Point;\n\nexport type PolygonObject = {\n  type: 'polygon';\n  points: Point[];\n  fillColor?: string;\n  strokeColor?: string;\n  strokeWidth?: number;\n  strokePattern?: PatternItem[];\n  jointType?: 'bevel'|'default'|'round';\n};\n\nexport type PolylineObject = {\n  type: 'polyline';\n  points: Point[];\n  color?: string;\n  width?: number;\n  pattern?: PatternItem[];\n  jointType?: 'bevel'|'default'|'round';\n  capType?: 'butt'|'round'|'square';\n};\n/**\n * PatternItem is used to define a repeating pattern for polyline and polygon line.\n * PatternItem with type 'stroke' and length 0 will represent a dot.\n * Use an array of PatternItem to define a pattern.\n */\nexport type PatternItem = {\n  type: 'stroke' | 'gap';\n  length: number;\n};"]}
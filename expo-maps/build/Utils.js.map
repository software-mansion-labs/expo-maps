{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../src/Utils.ts"],"names":[],"mappings":"AAKA,MAAM,UAAU,YAAY,CAAC,KAAU;IACrC,OAAO,CACL,OAAO,KAAK,IAAI,QAAQ;QACxB,OAAO,KAAK,IAAI,SAAS;QACzB,OAAO,KAAK,IAAI,QAAQ;QACxB,KAAK,IAAI,IAAI;QACb,KAAK,IAAI,SAAS,CACnB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,KAAU;IACjC,IACE,MAAM,IAAI,KAAK;QACf,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACrC,OAAO,IAAI,KAAK,EAChB;QACA,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACxD,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,KAAU;IAClC,IACE,MAAM,IAAI,KAAK;QACf,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC;QACtC,OAAO,IAAI,KAAK,EAChB;QACA,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAU;IACnC,IACE,MAAM,IAAI,KAAK;QACf,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;QACvC,OAAO,IAAI,KAAK,EAChB;QACA,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,KAAU;IACjC,IACE,MAAM,IAAI,KAAK;QACf,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACrC,OAAO,IAAI,KAAK,EAChB;QACA,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YAC7D,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { Marker } from './Marker';\r\nimport { Polygon } from './Polygon';\r\nimport { Polyline } from './Polyline';\r\nimport { Circle } from './Circle';\r\n\r\nexport function isSimpleType(child: any) {\r\n  return (\r\n    typeof child == 'string' ||\r\n    typeof child == 'boolean' ||\r\n    typeof child == 'number' ||\r\n    child == null ||\r\n    child == undefined\r\n  );\r\n}\r\n\r\nexport function isCircle(child: any): child is Circle {\r\n  if (\r\n    'type' in child &&\r\n    String(child.type).includes('Circle') &&\r\n    'props' in child\r\n  ) {\r\n    let props = Object.keys(child.props);\r\n    if (props.includes('center') && props.includes('radius')) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function isPolygon(child: any): child is Polygon {\r\n  if (\r\n    'type' in child &&\r\n    String(child.type).includes('Polygon') &&\r\n    'props' in child\r\n  ) {\r\n    let props = Object.keys(child.props);\r\n    if (props.includes('points')) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function isPolyline(child: any): child is Polyline {\r\n  if (\r\n    'type' in child &&\r\n    String(child.type).includes('Polyline') &&\r\n    'props' in child\r\n  ) {\r\n    let props = Object.keys(child.props);\r\n    if (props.includes('points')) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function isMarker(child: any): child is Marker {\r\n  if (\r\n    'type' in child &&\r\n    String(child.type).includes('Marker') &&\r\n    'props' in child\r\n  ) {\r\n    let props = Object.keys(child.props);\r\n    if (props.includes('latitude') && props.includes('longitude')) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n"]}
{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../src/Utils.ts"],"names":[],"mappings":"AAIA,MAAM,UAAU,YAAY,CAAC,KAAU;IACrC,OAAO,CACL,OAAO,KAAK,IAAI,QAAQ;QACxB,OAAO,KAAK,IAAI,SAAS;QACzB,OAAO,KAAK,IAAI,QAAQ;QACxB,KAAK,IAAI,IAAI;QACb,KAAK,IAAI,SAAS,CACnB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,KAAU;IAClC,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,OAAO,IAAI,KAAK,EAAE;QACjF,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAU;IACnC,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,OAAO,IAAI,KAAK,EAAE;QAClF,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,KAAU;IACjC,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,OAAO,IAAI,KAAK,EAAE;QAChF,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;YAC7D,OAAO,IAAI,CAAC;SACb;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { Marker } from './Marker';\nimport { Polygon } from './Polygon';\nimport { Polyline } from './Polyline';\n\nexport function isSimpleType(child: any) {\n  return (\n    typeof child == 'string' ||\n    typeof child == 'boolean' ||\n    typeof child == 'number' ||\n    child == null ||\n    child == undefined\n  );\n}\n\nexport function isPolygon(child: any): child is Polygon {\n  if ('type' in child && String(child.type).includes('Polygon') && 'props' in child) {\n    let props = Object.keys(child.props);\n    if (props.includes('points')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isPolyline(child: any): child is Polyline {\n  if ('type' in child && String(child.type).includes('Polyline') && 'props' in child) {\n    let props = Object.keys(child.props);\n    if (props.includes('points')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isMarker(child: any): child is Marker {\n  if ('type' in child && String(child.type).includes('Marker') && 'props' in child) {\n    let props = Object.keys(child.props);\n    if (props.includes('latitude') && props.includes('longitude')) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}
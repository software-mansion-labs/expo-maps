{"version":3,"file":"Maps.js","sourceRoot":"","sources":["../src/Maps.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ExpoMapViewProps,\n  MarkerProps,\n  MarkerObject,\n  PolygonProps,\n  PolygonObject,\n  PolylineObject,\n} from './Maps.types';\nimport {\n  NativeExpoAppleMapsView,\n  NativeExpoGoogleMapsView,\n} from './NativeExpoMapView';\nimport { Platform } from 'react-native';\n\nexport * from './Maps.types';\n\ninterface DefaultNativeExpoMapViewProps {\n  mapType: 'normal' | 'hybrid' | 'satellite' | 'terrain';\n  enableRotateGestures: boolean;\n  enableScrollGestures: boolean;\n  enableTiltGestures: boolean;\n  enableZoomGestures: boolean;\n}\n\nconst defaultNativeExpoMapViewProps: DefaultNativeExpoMapViewProps = {\n  mapType: 'normal',\n  enableRotateGestures: false,\n  enableScrollGestures: true,\n  enableTiltGestures: false,\n  enableZoomGestures: true,\n};\n\nexport class ExpoMap extends React.Component<ExpoMapViewProps> {\n  private mapChildren() {\n    const childrenArray = React.Children.map(this.props.children, (child) => {\n      if (!isSimpleType(child)) {\n        if (instanceOfMarker(child)) {\n          return {\n            type: 'marker',\n            latitude: child.props.latitude,\n            longitude: child.props.longitude,\n          } as MarkerObject;\n        } else if (instanceOfPolygon(child)) {\n          return {\n            type: 'polygon',\n            points: child.props.points,\n          } as PolygonObject;\n        } else if (instanceOfPolyline(child)) {\n          return {\n            type: 'polyline',\n            points: child.props.points,\n          } as PolylineObject;\n        }\n      }\n      warnIfChildIsIncompatible(child);\n      return null;\n    });\n\n    return {\n      markers: (childrenArray\n        ? childrenArray.filter((e) => e.type === 'marker')\n        : []) as MarkerObject[],\n      polygons: (childrenArray\n        ? childrenArray.filter((e) => e.type === 'polygon')\n        : []) as PolygonObject[],\n      polylines: (childrenArray\n        ? childrenArray.filter((e) => e.type === 'polyline')\n        : []) as PolylineObject[],\n    };\n  }\n\n  render() {\n    const childrenObj = this.mapChildren();\n\n    if (Platform.OS == 'ios' && this.props.provider == 'apple') {\n      return (\n        <NativeExpoAppleMapsView\n          {...defaultNativeExpoMapViewProps}\n          {...this.props}\n          markers={childrenObj.markers}\n          polygons={childrenObj.polygons}\n          polylines={childrenObj.polylines}\n        />\n      );\n    }\n\n    return (\n      <NativeExpoGoogleMapsView\n        {...defaultNativeExpoMapViewProps}\n        {...this.props}\n        jsonStyleString={\n          this.props.googleMapsJsonStyleString\n            ? this.props.googleMapsJsonStyleString\n            : ''\n        }\n        markers={childrenObj.markers}\n        polygons={childrenObj.polygons}\n        polylines={childrenObj.polylines}\n      />\n    );\n  }\n}\n\nexport class Marker extends React.Component<MarkerProps> {\n  render() {\n    return null;\n  }\n}\n\nfunction instanceOfMarker(child: any): child is Marker {\n  if (\n    'type' in child &&\n    String(child.type).includes('Marker') &&\n    'props' in child\n  ) {\n    return arePropsKeysEqual(Object.keys(child.props), [\n      'latitude',\n      'longitude',\n    ]);\n  }\n  return false;\n}\n\nexport class Polygon extends React.Component<PolygonProps> {\n  render() {\n    return null;\n  }\n}\n\nfunction instanceOfPolygon(child: any): child is Polygon {\n  if (\n    'type' in child &&\n    String(child.type).includes('Polygon') &&\n    'props' in child\n  ) {\n    return arePropsKeysEqual(Object.keys(child.props), ['points']);\n  }\n  return false;\n}\n\nexport class Polyline extends React.Component<PolygonProps> {\n  render() {\n    return null;\n  }\n}\n\nfunction instanceOfPolyline(child: any): child is Polyline {\n  if (\n    'type' in child &&\n    String(child.type).includes('Polyline') &&\n    'props' in child\n  ) {\n    return arePropsKeysEqual(Object.keys(child.props), ['points']);\n  }\n  return false;\n}\n\nfunction warnIfChildIsIncompatible(child: any) {\n  if (\n    typeof child == 'string' ||\n    typeof child == 'boolean' ||\n    typeof child == 'number'\n  ) {\n    console.warn(\n      `Warning! Child of type ${typeof child} isn't valid ExpoMap child!`\n    );\n  } else if (child != null && child != undefined) {\n    console.log(child.type);\n    console.warn(\n      `Warning! Child of type ${\n        (child as React.ReactElement<any>).type\n      } isn't valid ExpoMap child!`\n    );\n  }\n}\n\nfunction isSimpleType(child: any) {\n  return (\n    typeof child == 'string' ||\n    typeof child == 'boolean' ||\n    typeof child == 'number' ||\n    child == null ||\n    child == undefined\n  );\n}\n\nfunction arePropsKeysEqual(\n  expectedPropsKeys: string[],\n  actualPropsKeys: string[]\n) {\n  return (\n    actualPropsKeys.length === expectedPropsKeys.length &&\n    actualPropsKeys.every((value, index) => value === expectedPropsKeys[index])\n  );\n}\n"]}